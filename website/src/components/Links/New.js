import React, {Component} from 'react';
import { withRouter } from 'react-router-dom';
import { compose } from 'recompose';
import { withParse } from '../parse';
import './links.css';
import { Link } from 'react-router-dom';
import * as ROUTES from '../../constants/routes';
import { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';



class NewLinkPage extends React.Component{
    constructor(props) {
      super(props)
      this.setState({
        urls : []
      })
    }
  
    
    render(){
      return (
        <div>
          <div style={{
              padding:"2rem 0.5rem",
              color : "#D9514EFF",
              marginBottom:"2rem"
            }}>
            <div class="container">
              <h2>New Link</h2>
            </div>
          </div>
          <div class="container">
            < NewLinkForm />
          </div>
        </div>
      )
    }
  }

var expression = /[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)?/gi;
const urlRegex = new RegExp(expression);
const INITIAL_STATE = {
  url : '',
  enhancedTrack : true, //  set this by deafault
  geoLog : false,
  error : '',
  autogen : false,
  redirectUrl : ''

};
function makeid(length) {
  var result           = '';
  var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  var charactersLength = characters.length;
  for ( var i = 0; i < length; i++ ) {
     result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
}
class NewLinkFormBase extends Component{
  constructor(props){
    super(props);
    this.state  = {
      ... INITIAL_STATE
    }

  }
  async onSubmit ( event,_this) {
    event.preventDefault();
     
   
    
      //  if successfull 
    
    try{
      const RedirectUrl = _this.props.parse.parse.Object.extend("Redirecturl");
      var redirectObj = new RedirectUrl()
      var { url, enhancedTrack, geoLog,autogen, error, redirectUrl } = _this.state;
      if(autogen){
        redirectUrl = makeid(7)
      }
      
      redirectObj.set('url',url);
      redirectObj.set('enhancedTrack',enhancedTrack);
      redirectObj.set('geoLog',geoLog);
      redirectObj.set('autogen',autogen);
      redirectObj.set('redirecturl',redirectUrl);
      _this.props.parse.parse.setObjectToPrivate(redirectObj)
      var result = await redirectObj.save();
      
      console.log(result);
      // at the end of it we should blank this form out 
      //  and take them to the loggin page for this 
      //  url 
      _this.setState({ ...INITIAL_STATE });
      _this.props.history.push(ROUTES.LINKS_DASHBOARD+ "/" + result.id);
      
      debugger
    }catch(error){
      this.setState({ error });
    }
    
  };
  onChange = event => {
    this.setState({ [event.target.name]: event.target.value });
  };
  onButtonClick = event => {
    this.setState({ [event.target.name]: !this.state[event.target.name] });
  }
  render(){
    const { url, enhancedTrack, geoLog,autogen, error, redirectUrl } = this.state;
    //  make sure there is an email and that is it a 
    const isInvalid = url === '' || !url.match(urlRegex) ;

    var redirectUrlStyle = {width: "100%"};
    if(this.state.autogen){
      redirectUrlStyle = {
        display : "none",width: "100%"
      }
    }
    
  return (
    <Form onSubmit={(event)=>{this.onSubmit(event,this)}} style={{
      display : "flex",
      flexDirection : "column",
      alignItems : "center",
      width : "100%"
    }}>
      <FormGroup style={{width: "100%"}}>
        <Label for="emailInput">URL</Label>
        <Input 
        id="emailInput"
        name="url"
        value={url}
        onChange={this.onChange}
        type="text"
        placeholder="Enter Url Or tracking code..."
        />
      </FormGroup>
      <FormGroup style={redirectUrlStyle}>
        <Label for="emailInput">Redirect URL</Label>
        <Input 
        id="emailInput"
        name="redirectUrl"
        value={redirectUrl}
        onChange={this.onChange}
        type="text"
        placeholder="If you want Come up with a redirect url yourself"
        />
      </FormGroup>
      <div style={{display: "flex",width: "100%", alignItems:"stretch", marginBottom:"1rem"}}>
       
        <Button
        style={{flex:1}}
        color="danger"
        name="enhancedTrack"   outline={!enhancedTrack} onClick={this.onButtonClick}  >
          Enhanced Tracking
        </Button>
        <div style={{width:"2rem"}}>

        </div>
        <Button
      color="danger"
      style={{flex:1}}
      outline={!autogen}    name="autogen" onClick={this.onButtonClick}   >
        Autogenerated URL
        </Button>
        <div style={{width:"2rem"}}>

</div>
      <Button
      color="danger"
      style={{flex:1}}
      outline={!geoLog}    name="geoLog" onClick={this.onButtonClick}   >
          GeoTracking
        </Button>

       
      </div>
       
      
      <Button disabled={isInvalid} type="submit">
        Create Tracking Link
      </Button>

      {error && <p>{error.message}</p>}
    </Form>
  )

    



    

  }
}


export const NewLinkForm = compose(
  withRouter,
  withParse,
)(NewLinkFormBase);


  export default withParse(NewLinkPage)